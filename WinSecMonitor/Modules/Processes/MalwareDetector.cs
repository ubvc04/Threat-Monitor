using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace WinSecMonitor.Modules.Processes
{
    /// <summary>
    /// Provides functionality to detect potential malware based on file hashes and other indicators
    /// </summary>
    public class MalwareDetector
    {
        #region Private Fields

        private readonly HashSet<string> _knownMalwareHashes;
        private readonly HttpClient _httpClient;
        private readonly string _virustotalApiKey;
        private bool _isInitialized;

        #endregion

        #region Properties

        /// <summary>
        /// Gets whether the malware detector is initialized with hash data
        /// </summary>
        public bool IsInitialized => _isInitialized;

        /// <summary>
        /// Gets the number of known malware hashes
        /// </summary>
        public int KnownMalwareHashCount => _knownMalwareHashes.Count;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the MalwareDetector class
        /// </summary>
        /// <param name="virustotalApiKey">Optional VirusTotal API key for online hash checking</param>
        public MalwareDetector(string virustotalApiKey = null)
        {
            _knownMalwareHashes = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            _httpClient = new HttpClient();
            _virustotalApiKey = virustotalApiKey;

            // Initialize with default malware hashes
            InitializeDefaultHashes();

            LogInfo("MalwareDetector initialized");
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Checks if a file hash matches known malware
        /// </summary>
        /// <param name="fileHash">The MD5 hash to check</param>
        /// <returns>True if the hash matches known malware, false otherwise</returns>
        public bool IsKnownMalwareHash(string fileHash)
        {
            if (string.IsNullOrEmpty(fileHash))
            {
                return false;
            }

            return _knownMalwareHashes.Contains(fileHash);
        }

        /// <summary>
        /// Asynchronously checks a file hash against VirusTotal
        /// </summary>
        /// <param name="fileHash">The file hash to check</param>
        /// <returns>A tuple containing whether the hash is malicious and the detection ratio</returns>
        public async Task<(bool IsMalicious, string DetectionRatio)> CheckHashOnlineAsync(string fileHash)
        {
            if (string.IsNullOrEmpty(fileHash) || string.IsNullOrEmpty(_virustotalApiKey))
            {
                return (false, string.Empty);
            }

            try
            {
                // This is a simplified example. In a real implementation, you would use the VirusTotal API properly
                // and handle rate limiting, authentication, etc.
                var url = $"https://www.virustotal.com/api/v3/files/{fileHash}";
                _httpClient.DefaultRequestHeaders.Add("x-apikey", _virustotalApiKey);

                var response = await _httpClient.GetAsync(url);
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    // Parse the JSON response to extract detection ratio
                    // This is simplified - you would need to properly parse the JSON
                    if (content.Contains("malicious"))
                    {
                        // Extract detection ratio from response
                        // For example: "detection_ratio": "35/68"
                        return (true, "Unknown ratio"); // In a real implementation, extract the actual ratio
                    }
                }

                return (false, string.Empty);
            }
            catch (Exception ex)
            {
                LogError($"Error checking hash online: {ex.Message}");
                return (false, string.Empty);
            }
        }

        /// <summary>
        /// Loads malware hashes from a file
        /// </summary>
        /// <param name="filePath">Path to the hash file</param>
        /// <returns>Number of hashes loaded</returns>
        public int LoadHashesFromFile(string filePath)
        {
            if (!File.Exists(filePath))
            {
                LogWarning($"Hash file not found: {filePath}");
                return 0;
            }

            try
            {
                int count = 0;
                foreach (var line in File.ReadLines(filePath))
                {
                    var hash = line.Trim();
                    if (!string.IsNullOrWhiteSpace(hash) && hash.Length >= 32)
                    {
                        _knownMalwareHashes.Add(hash);
                        count++;
                    }
                }

                _isInitialized = _knownMalwareHashes.Count > 0;
                LogInfo($"Loaded {count} malware hashes from {filePath}");
                return count;
            }
            catch (Exception ex)
            {
                LogError($"Error loading hashes from file: {ex.Message}");
                return 0;
            }
        }

        /// <summary>
        /// Adds a hash to the known malware hashes
        /// </summary>
        /// <param name="hash">The hash to add</param>
        public void AddMalwareHash(string hash)
        {
            if (!string.IsNullOrWhiteSpace(hash) && hash.Length >= 32)
            {
                _knownMalwareHashes.Add(hash);
                _isInitialized = true;
                LogInfo($"Added malware hash: {hash}");
            }
        }

        /// <summary>
        /// Saves the current malware hashes to a file
        /// </summary>
        /// <param name="filePath">Path to save the hashes</param>
        /// <returns>True if successful, false otherwise</returns>
        public bool SaveHashesToFile(string filePath)
        {
            try
            {
                File.WriteAllLines(filePath, _knownMalwareHashes);
                LogInfo($"Saved {_knownMalwareHashes.Count} malware hashes to {filePath}");
                return true;
            }
            catch (Exception ex)
            {
                LogError($"Error saving hashes to file: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Calculates the MD5 hash of a file
        /// </summary>
        /// <param name="filePath">Path to the file</param>
        /// <returns>The MD5 hash as a string, or empty if the file cannot be accessed</returns>
        public static string CalculateFileHash(string filePath)
        {
            try
            {
                if (!File.Exists(filePath))
                {
                    return string.Empty;
                }

                using (var md5 = MD5.Create())
                using (var stream = File.OpenRead(filePath))
                {
                    var hash = md5.ComputeHash(stream);
                    return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
                }
            }
            catch (Exception ex) when (ex is IOException || ex is UnauthorizedAccessException)
            {
                // File may be locked or access denied
                return string.Empty;
            }
        }

        /// <summary>
        /// Analyzes a PowerShell command for suspicious encoded content
        /// </summary>
        /// <param name="command">The PowerShell command to analyze</param>
        /// <returns>True if the command contains suspicious encoded content, false otherwise</returns>
        public bool AnalyzePowerShellCommand(string command)
        {
            if (string.IsNullOrEmpty(command))
            {
                return false;
            }

            // Check for encoded command parameters
            bool hasEncodedParam = command.IndexOf("-e ", StringComparison.OrdinalIgnoreCase) >= 0 ||
                                  command.IndexOf("-enc", StringComparison.OrdinalIgnoreCase) >= 0 ||
                                  command.IndexOf("-encoded", StringComparison.OrdinalIgnoreCase) >= 0 ||
                                  command.IndexOf("-encodedcommand", StringComparison.OrdinalIgnoreCase) >= 0;

            if (!hasEncodedParam)
            {
                return false;
            }

            // Try to extract and decode the Base64 content
            try
            {
                // Find potential Base64 encoded content
                // This is a simplified approach - a real implementation would be more robust
                var parts = command.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                for (int i = 0; i < parts.Length - 1; i++)
                {
                    if (parts[i].Equals("-e", StringComparison.OrdinalIgnoreCase) ||
                        parts[i].Equals("-enc", StringComparison.OrdinalIgnoreCase) ||
                        parts[i].Equals("-encoded", StringComparison.OrdinalIgnoreCase) ||
                        parts[i].Equals("-encodedcommand", StringComparison.OrdinalIgnoreCase))
                    {
                        // Try to decode the next part as Base64
                        string encodedContent = parts[i + 1];
                        if (IsBase64String(encodedContent))
                        {
                            string decodedContent = DecodeBase64(encodedContent);
                            return ContainsSuspiciousContent(decodedContent);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogWarning($"Error analyzing PowerShell command: {ex.Message}");
            }

            // If we can't decode it, consider it suspicious by default
            return true;
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Initializes the detector with default known malware hashes
        /// </summary>
        private void InitializeDefaultHashes()
        {
            // In a real implementation, these would be loaded from a database or file
            // These are example hashes and not actual malware hashes
            var defaultHashes = new[]
            {
                "e44e35b203bbc5a16b8d0e0f4d4c9c4a", // Example hash 1
                "a7b5f4e2c1d0b3a2e1f0d9c8b7a6f5e4", // Example hash 2
                "1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p"  // Example hash 3
            };

            foreach (var hash in defaultHashes)
            {
                _knownMalwareHashes.Add(hash);
            }

            _isInitialized = true;
        }

        /// <summary>
        /// Checks if a string is a valid Base64 encoded string
        /// </summary>
        private bool IsBase64String(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return false;
            }

            // Check if the string length is a multiple of 4
            if (s.Length % 4 != 0)
            {
                return false;
            }

            // Check if the string contains only Base64 characters
            return s.All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/' || c == '=');
        }

        /// <summary>
        /// Decodes a Base64 encoded string
        /// </summary>
        private string DecodeBase64(string encodedString)
        {
            try
            {
                byte[] data = Convert.FromBase64String(encodedString);
                return Encoding.UTF8.GetString(data);
            }
            catch
            {
                return string.Empty;
            }
        }

        /// <summary>
        /// Checks if a string contains suspicious content
        /// </summary>
        private bool ContainsSuspiciousContent(string content)
        {
            if (string.IsNullOrEmpty(content))
            {
                return false;
            }

            // Check for suspicious PowerShell commands
            var suspiciousTerms = new[]
            {
                "invoke-expression", "iex", "invoke-webrequest", "invoke-restmethod",
                "downloadstring", "downloadfile", "webclient", "net.webclient",
                "start-bitstransfer", "system.net.sockets", "hidden", "bypass",
                "remotesigned", "unrestricted", "executionpolicy", "shellcode",
                "reflection.assembly", "loadwithpartialname", "gettype", "invoke",
                "createinstance", "addscript", "addcommand", "addargument",
                "addparameter", "scriptblock", "scripttext", "encodedcommand",
                "base64", "bypass", "compressedcommand", "windowstyle hidden"
            };

            return suspiciousTerms.Any(term => content.IndexOf(term, StringComparison.OrdinalIgnoreCase) >= 0);
        }

        /// <summary>
        /// Logs an informational message
        /// </summary>
        private static void LogInfo(string message)
        {
            // TODO: Replace with actual logging implementation
            Console.WriteLine($"[INFO] [MalwareDetector] {message}");
        }

        /// <summary>
        /// Logs a warning message
        /// </summary>
        private static void LogWarning(string message)
        {
            // TODO: Replace with actual logging implementation
            Console.WriteLine($"[WARNING] [MalwareDetector] {message}");
        }

        /// <summary>
        /// Logs an error message
        /// </summary>
        private static void LogError(string message)
        {
            // TODO: Replace with actual logging implementation
            Console.WriteLine($"[ERROR] [MalwareDetector] {message}");
        }

        #endregion
    }
}