using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WinSecMonitor.Utils.Logging;
using WinSecMonitor.Utils.ErrorHandling;

namespace WinSecMonitor.Modules.Compliance
{
    /// <summary>
    /// Manages vulnerability and compliance monitoring components
    /// </summary>
    public class VulnerabilityComplianceManager
    {
        private readonly Logger _logger = Logger.GetInstance();
        private readonly SafeExceptionHandler _exceptionHandler = new SafeExceptionHandler();

        // Compliance components
        public WindowsUpdateChecker UpdateChecker { get; }
        public SecurityPolicyMonitor PolicyMonitor { get; }
        public SoftwareVersionChecker SoftwareChecker { get; }
        public ComplianceReportGenerator ReportGenerator { get; }

        // Compliance status
        public bool IsCheckingCompliance { get; private set; }
        public DateTime LastComplianceCheckTime { get; private set; } = DateTime.MinValue;
        public int OverallComplianceScore { get; private set; }
        public int UpdateComplianceScore { get; private set; }
        public int PolicyComplianceScore { get; private set; }
        public int SoftwareComplianceScore { get; private set; }

        // Compliance alerts
        private ObservableCollection<ComplianceAlert> _alerts = new ObservableCollection<ComplianceAlert>();
        public ReadOnlyObservableCollection<ComplianceAlert> Alerts { get; }

        // Events
        public event EventHandler<ComplianceCheckProgressEventArgs> ComplianceCheckProgress;
        public event EventHandler<ComplianceCheckCompletedEventArgs> ComplianceCheckCompleted;
        public event EventHandler<ComplianceAlertEventArgs> ComplianceAlertAdded;
        public event EventHandler<ReportGenerationProgressEventArgs> ReportGenerationProgress;
        public event EventHandler<ReportGenerationCompletedEventArgs> ReportGenerationCompleted;

        public VulnerabilityComplianceManager()
        {
            // Initialize components
            UpdateChecker = new WindowsUpdateChecker();
            PolicyMonitor = new SecurityPolicyMonitor();
            SoftwareChecker = new SoftwareVersionChecker();
            ReportGenerator = new ComplianceReportGenerator(UpdateChecker, PolicyMonitor, SoftwareChecker);

            // Initialize alerts collection
            Alerts = new ReadOnlyObservableCollection<ComplianceAlert>(_alerts);

            // Subscribe to component events
            UpdateChecker.UpdateCheckProgress += (s, e) => OnComplianceCheckProgress($"Checking Windows updates: {e.Status}", e.PercentComplete / 3);
            UpdateChecker.UpdateCheckCompleted += UpdateChecker_UpdateCheckCompleted;

            PolicyMonitor.PolicyCheckProgress += (s, e) => OnComplianceCheckProgress($"Checking security policies: {e.Status}", 33 + (e.PercentComplete / 3));
            PolicyMonitor.PolicyCheckCompleted += PolicyMonitor_PolicyCheckCompleted;

            SoftwareChecker.SoftwareCheckProgress += (s, e) => OnComplianceCheckProgress($"Checking software versions: {e.Status}", 66 + (e.PercentComplete / 3));
            SoftwareChecker.SoftwareCheckCompleted += SoftwareChecker_SoftwareCheckCompleted;

            ReportGenerator.ReportGenerationProgress += (s, e) => ReportGenerationProgress?.Invoke(this, e);
            ReportGenerator.ReportGenerationCompleted += (s, e) => ReportGenerationCompleted?.Invoke(this, e);
        }

        /// <summary>
        /// Checks compliance status by running all compliance checks
        /// </summary>
        public async Task CheckComplianceAsync()
        {
            try
            {
                if (IsCheckingCompliance)
                    return;

                IsCheckingCompliance = true;
                _logger.LogInfo("Starting compliance check");
                OnComplianceCheckProgress("Starting compliance check...", 0);

                // Clear previous alerts
                ClearAlerts();

                // Check Windows updates
                await UpdateChecker.CheckForUpdatesAsync();

                // Check security policies
                await PolicyMonitor.CheckAllPoliciesAsync();

                // Check software versions
                await SoftwareChecker.CheckSoftwareAsync();

                // Generate comprehensive report to calculate scores
                var report = await ReportGenerator.GenerateComprehensiveReportAsync();
                OverallComplianceScore = report.ComplianceScore;
                UpdateComplianceScore = CalculateUpdateComplianceScore();
                PolicyComplianceScore = CalculatePolicyComplianceScore();
                SoftwareComplianceScore = CalculateSoftwareComplianceScore();

                LastComplianceCheckTime = DateTime.Now;
                IsCheckingCompliance = false;

                _logger.LogInfo($"Compliance check completed. Overall score: {OverallComplianceScore}%");
                OnComplianceCheckCompleted(true, null);
            }
            catch (Exception ex)
            {
                IsCheckingCompliance = false;
                _logger.LogError($"Error checking compliance: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error checking compliance");
                OnComplianceCheckCompleted(false, ex.Message);
            }
        }

        /// <summary>
        /// Generates a comprehensive compliance report
        /// </summary>
        public async Task<ComplianceReport> GenerateComprehensiveReportAsync()
        {
            try
            {
                return await ReportGenerator.GenerateComprehensiveReportAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error generating comprehensive report: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error generating comprehensive report");
                throw;
            }
        }

        /// <summary>
        /// Generates a Windows update report
        /// </summary>
        public async Task<WindowsUpdateReport> GenerateWindowsUpdateReportAsync()
        {
            try
            {
                return await ReportGenerator.GenerateWindowsUpdateReportAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error generating Windows update report: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error generating Windows update report");
                throw;
            }
        }

        /// <summary>
        /// Generates a security policy report
        /// </summary>
        public async Task<SecurityPolicyReport> GenerateSecurityPolicyReportAsync()
        {
            try
            {
                return await ReportGenerator.GenerateSecurityPolicyReportAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error generating security policy report: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error generating security policy report");
                throw;
            }
        }

        /// <summary>
        /// Generates a software version report
        /// </summary>
        public async Task<SoftwareVersionReport> GenerateSoftwareVersionReportAsync()
        {
            try
            {
                return await ReportGenerator.GenerateSoftwareVersionReportAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error generating software version report: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error generating software version report");
                throw;
            }
        }

        /// <summary>
        /// Exports a report to CSV format
        /// </summary>
        public async Task<string> ExportReportToCsvAsync(BaseReport report, string filePath)
        {
            try
            {
                return await ReportGenerator.ExportReportToCsvAsync(report, filePath);
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error exporting report to CSV: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error exporting report to CSV");
                throw;
            }
        }

        /// <summary>
        /// Exports a report to HTML format
        /// </summary>
        public async Task<string> ExportReportToHtmlAsync(BaseReport report, string filePath)
        {
            try
            {
                return await ReportGenerator.ExportReportToHtmlAsync(report, filePath);
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error exporting report to HTML: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error exporting report to HTML");
                throw;
            }
        }

        /// <summary>
        /// Clears all compliance alerts
        /// </summary>
        public void ClearAlerts()
        {
            _alerts.Clear();
            _logger.LogInfo("Cleared all compliance alerts");
        }

        /// <summary>
        /// Calculates the update compliance score
        /// </summary>
        private int CalculateUpdateComplianceScore()
        {
            if (UpdateChecker.MissingUpdatesCount == 0)
                return 100;

            // Deduct points for missing updates, with more weight on critical and security updates
            int deduction = 0;

            // Deduct for critical updates (up to 50 points)
            if (UpdateChecker.CriticalUpdatesCount > 0)
            {
                deduction += Math.Min(50, UpdateChecker.CriticalUpdatesCount * 10);
            }

            // Deduct for security updates (up to 30 points)
            if (UpdateChecker.SecurityUpdatesCount > 0)
            {
                deduction += Math.Min(30, UpdateChecker.SecurityUpdatesCount * 5);
            }

            // Deduct for other updates (up to 20 points)
            int otherUpdatesCount = UpdateChecker.MissingUpdatesCount - UpdateChecker.CriticalUpdatesCount - UpdateChecker.SecurityUpdatesCount;
            if (otherUpdatesCount > 0)
            {
                deduction += Math.Min(20, otherUpdatesCount * 2);
            }

            return Math.Max(0, 100 - deduction);
        }

        /// <summary>
        /// Calculates the policy compliance score
        /// </summary>
        private int CalculatePolicyComplianceScore()
        {
            int totalPolicies = PolicyMonitor.FirewallPolicies.Count + PolicyMonitor.PasswordPolicies.Count + 
                               PolicyMonitor.AuditPolicies.Count + PolicyMonitor.GroupPolicies.Count;

            if (totalPolicies == 0)
                return 100;

            int compliantPolicies = totalPolicies - PolicyMonitor.NonCompliantPoliciesCount;
            return (int)((double)compliantPolicies / totalPolicies * 100);
        }

        /// <summary>
        /// Calculates the software compliance score
        /// </summary>
        private int CalculateSoftwareComplianceScore()
        {
            if (SoftwareChecker.InstalledSoftware.Count == 0)
                return 100;

            // Count software by status
            int upToDateCount = SoftwareChecker.InstalledSoftware.Count(s => s.Status == SoftwareStatus.UpToDate);

            // Calculate score based on percentage of up-to-date software
            // Vulnerable software has a higher impact on the score than outdated software
            double upToDatePercentage = (double)upToDateCount / SoftwareChecker.InstalledSoftware.Count;
            int vulnerableImpact = Math.Min(40, SoftwareChecker.VulnerableSoftwareCount * 8); // Up to 40 points deduction for vulnerable software
            int outdatedImpact = Math.Min(20, SoftwareChecker.OutdatedSoftwareCount * 2);    // Up to 20 points deduction for outdated software

            int baseScore = (int)(upToDatePercentage * 100);
            return Math.Max(0, baseScore - vulnerableImpact - outdatedImpact);
        }

        /// <summary>
        /// Handles the UpdateCheckCompleted event
        /// </summary>
        private void UpdateChecker_UpdateCheckCompleted(object sender, UpdateCheckCompletedEventArgs e)
        {
            if (!e.Success)
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.WindowsUpdate,
                    Severity = AlertSeverity.Error,
                    Title = "Windows Update Check Failed",
                    Description = $"Failed to check for Windows updates: {e.ErrorMessage}",
                    Recommendation = "Check Windows Update service status and try again."
                });
                return;
            }

            // Add alerts for missing critical updates
            foreach (var update in UpdateChecker.AvailableUpdates.Where(u => u.Severity == UpdateSeverity.Critical))
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.WindowsUpdate,
                    Severity = AlertSeverity.Critical,
                    Title = $"Missing Critical Update: {update.KBArticleID}",
                    Description = update.Title,
                    Recommendation = "Install this critical update as soon as possible."
                });
            }

            // Add alerts for missing security updates
            foreach (var update in UpdateChecker.AvailableUpdates.Where(u => u.Severity == UpdateSeverity.Important && u.Category.Contains("Security")))
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.WindowsUpdate,
                    Severity = AlertSeverity.High,
                    Title = $"Missing Security Update: {update.KBArticleID}",
                    Description = update.Title,
                    Recommendation = "Install this security update to protect your system."
                });
            }

            // Add a summary alert if there are many missing updates
            if (UpdateChecker.MissingUpdatesCount > 10)
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.WindowsUpdate,
                    Severity = AlertSeverity.Medium,
                    Title = $"Multiple Updates Missing",
                    Description = $"There are {UpdateChecker.MissingUpdatesCount} updates missing, including {UpdateChecker.CriticalUpdatesCount} critical and {UpdateChecker.SecurityUpdatesCount} security updates.",
                    Recommendation = "Run Windows Update to install missing updates."
                });
            }
        }

        /// <summary>
        /// Handles the PolicyCheckCompleted event
        /// </summary>
        private void PolicyMonitor_PolicyCheckCompleted(object sender, PolicyCheckCompletedEventArgs e)
        {
            if (!e.Success)
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.SecurityPolicy,
                    Severity = AlertSeverity.Error,
                    Title = "Security Policy Check Failed",
                    Description = $"Failed to check security policies: {e.ErrorMessage}",
                    Recommendation = "Check permissions and try again."
                });
                return;
            }

            // Add alerts for non-compliant firewall policies
            foreach (var policy in PolicyMonitor.FirewallPolicies.Where(p => p.Status == PolicyStatus.NonCompliant))
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.SecurityPolicy,
                    Severity = AlertSeverity.High,
                    Title = $"Firewall Policy Non-Compliant: {policy.Name}",
                    Description = $"Current value: {policy.CurrentValue}, Expected value: {policy.ExpectedValue}",
                    Recommendation = policy.Recommendation
                });
            }

            // Add alerts for non-compliant password policies
            foreach (var policy in PolicyMonitor.PasswordPolicies.Where(p => p.Status == PolicyStatus.NonCompliant))
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.SecurityPolicy,
                    Severity = AlertSeverity.High,
                    Title = $"Password Policy Non-Compliant: {policy.Name}",
                    Description = $"Current value: {policy.CurrentValue}, Expected value: {policy.ExpectedValue}",
                    Recommendation = policy.Recommendation
                });
            }

            // Add alerts for non-compliant audit policies
            foreach (var policy in PolicyMonitor.AuditPolicies.Where(p => p.Status == PolicyStatus.NonCompliant))
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.SecurityPolicy,
                    Severity = AlertSeverity.Medium,
                    Title = $"Audit Policy Non-Compliant: {policy.Name}",
                    Description = $"Current value: {policy.CurrentValue}, Expected value: {policy.ExpectedValue}",
                    Recommendation = policy.Recommendation
                });
            }

            // Add alerts for non-compliant group policies
            foreach (var policy in PolicyMonitor.GroupPolicies.Where(p => p.Status == PolicyStatus.NonCompliant))
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.SecurityPolicy,
                    Severity = AlertSeverity.Medium,
                    Title = $"Group Policy Non-Compliant: {policy.Name}",
                    Description = $"Current value: {policy.CurrentValue}, Expected value: {policy.ExpectedValue}",
                    Recommendation = policy.Recommendation
                });
            }

            // Add a summary alert if there are many non-compliant policies
            if (PolicyMonitor.NonCompliantPoliciesCount > 5)
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.SecurityPolicy,
                    Severity = AlertSeverity.High,
                    Title = $"Multiple Security Policies Non-Compliant",
                    Description = $"There are {PolicyMonitor.NonCompliantPoliciesCount} non-compliant security policies.",
                    Recommendation = "Review and update security policies to meet compliance requirements."
                });
            }
        }

        /// <summary>
        /// Handles the SoftwareCheckCompleted event
        /// </summary>
        private void SoftwareChecker_SoftwareCheckCompleted(object sender, SoftwareCheckCompletedEventArgs e)
        {
            if (!e.Success)
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.Software,
                    Severity = AlertSeverity.Error,
                    Title = "Software Version Check Failed",
                    Description = $"Failed to check software versions: {e.ErrorMessage}",
                    Recommendation = "Check permissions and try again."
                });
                return;
            }

            // Add alerts for vulnerable software
            foreach (var software in SoftwareChecker.InstalledSoftware.Where(s => s.Status == SoftwareStatus.Vulnerable))
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.Software,
                    Severity = AlertSeverity.Critical,
                    Title = $"Vulnerable Software: {software.Name}",
                    Description = $"Version {software.Version} has known vulnerabilities: {software.VulnerabilityInfo}",
                    Recommendation = $"Update to the latest version ({software.LatestVersion}) as soon as possible."
                });
            }

            // Add alerts for outdated software
            foreach (var software in SoftwareChecker.InstalledSoftware.Where(s => s.Status == SoftwareStatus.Outdated))
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.Software,
                    Severity = AlertSeverity.Medium,
                    Title = $"Outdated Software: {software.Name}",
                    Description = $"Current version: {software.Version}, Latest version: {software.LatestVersion}",
                    Recommendation = "Update to the latest version for improved features and security."
                });
            }

            // Add a summary alert if there are many vulnerable or outdated software
            if (SoftwareChecker.VulnerableSoftwareCount + SoftwareChecker.OutdatedSoftwareCount > 5)
            {
                AddAlert(new ComplianceAlert
                {
                    Timestamp = DateTime.Now,
                    Category = AlertCategory.Software,
                    Severity = AlertSeverity.High,
                    Title = $"Multiple Software Updates Required",
                    Description = $"There are {SoftwareChecker.VulnerableSoftwareCount} vulnerable and {SoftwareChecker.OutdatedSoftwareCount} outdated software installations.",
                    Recommendation = "Update all software to the latest versions to improve security and performance."
                });
            }
        }

        /// <summary>
        /// Adds a compliance alert
        /// </summary>
        private void AddAlert(ComplianceAlert alert)
        {
            _alerts.Add(alert);
            _logger.LogInfo($"Added compliance alert: {alert.Title}");
            OnComplianceAlertAdded(alert);
        }

        /// <summary>
        /// Raises the ComplianceCheckProgress event
        /// </summary>
        private void OnComplianceCheckProgress(string status, int percentComplete)
        {
            ComplianceCheckProgress?.Invoke(this, new ComplianceCheckProgressEventArgs(status, percentComplete));
        }

        /// <summary>
        /// Raises the ComplianceCheckCompleted event
        /// </summary>
        private void OnComplianceCheckCompleted(bool success, string errorMessage)
        {
            ComplianceCheckCompleted?.Invoke(this, new ComplianceCheckCompletedEventArgs(success, errorMessage));
        }

        /// <summary>
        /// Raises the ComplianceAlertAdded event
        /// </summary>
        private void OnComplianceAlertAdded(ComplianceAlert alert)
        {
            ComplianceAlertAdded?.Invoke(this, new ComplianceAlertEventArgs(alert));
        }
    }

    /// <summary>
    /// Compliance alert
    /// </summary>
    public class ComplianceAlert
    {
        public DateTime Timestamp { get; set; }
        public AlertCategory Category { get; set; }
        public AlertSeverity Severity { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Recommendation { get; set; }
    }

    /// <summary>
    /// Alert category
    /// </summary>
    public enum AlertCategory
    {
        WindowsUpdate,
        SecurityPolicy,
        Software,
        General
    }

    /// <summary>
    /// Alert severity
    /// </summary>
    public enum AlertSeverity
    {
        Critical,
        High,
        Medium,
        Low,
        Information,
        Error
    }

    /// <summary>
    /// Event arguments for compliance check progress
    /// </summary>
    public class ComplianceCheckProgressEventArgs : EventArgs
    {
        public string Status { get; }
        public int PercentComplete { get; }

        public ComplianceCheckProgressEventArgs(string status, int percentComplete)
        {
            Status = status;
            PercentComplete = percentComplete;
        }
    }

    /// <summary>
    /// Event arguments for compliance check completed
    /// </summary>
    public class ComplianceCheckCompletedEventArgs : EventArgs
    {
        public bool Success { get; }
        public string ErrorMessage { get; }

        public ComplianceCheckCompletedEventArgs(bool success, string errorMessage)
        {
            Success = success;
            ErrorMessage = errorMessage;
        }
    }

    /// <summary>
    /// Event arguments for compliance alert added
    /// </summary>
    public class ComplianceAlertEventArgs : EventArgs
    {
        public ComplianceAlert Alert { get; }

        public ComplianceAlertEventArgs(ComplianceAlert alert)
        {
            Alert = alert;
        }
    }
}