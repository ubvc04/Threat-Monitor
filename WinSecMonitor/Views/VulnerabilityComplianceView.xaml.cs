using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using Microsoft.Win32;
using WinSecMonitor.Modules.Compliance;
using WinSecMonitor.Utils.Logging;
using WinSecMonitor.Utils.ErrorHandling;

namespace WinSecMonitor.Views
{
    /// <summary>
    /// Interaction logic for VulnerabilityComplianceView.xaml
    /// </summary>
    public partial class VulnerabilityComplianceView : UserControl, INotifyPropertyChanged
    {
        private readonly Logger _logger = Logger.GetInstance();
        private readonly SafeExceptionHandler _exceptionHandler = new SafeExceptionHandler();
        private readonly VulnerabilityComplianceManager _complianceManager;

        // Properties for binding
        private string _statusMessage = "Ready to check compliance";
        private string _lastCheckTimeMessage = "No compliance check performed yet";
        private string _updateStatusMessage = "No Windows updates checked yet";
        private string _policyStatusMessage = "No security policies checked yet";
        private string _softwareSearchText = "";
        private string _alertSearchText = "";
        private int _autoCheckInterval = 60; // minutes
        private bool _checkOnStartup = true;
        private string _reportExportPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "WinSecMonitor Reports");
        private int _criticalThreshold = 50;
        private int _warningThreshold = 70;
        private int _goodThreshold = 85;
        private int _excellentThreshold = 95;
        private bool _enableNotifications = true;
        private bool _notifyCriticalIssues = true;
        private bool _notifyHighIssues = true;
        private bool _notifyMediumIssues = false;

        // Collections for filtering
        private ObservableCollection<AlertCategory> _alertCategories = new ObservableCollection<AlertCategory>();
        private ObservableCollection<AlertSeverity> _alertSeverities = new ObservableCollection<AlertSeverity>();
        private ObservableCollection<UpdateSeverity> _updateSeverities = new ObservableCollection<UpdateSeverity>();
        private ObservableCollection<string> _updateCategories = new ObservableCollection<string>();
        private ObservableCollection<PolicyCategory> _policyCategories = new ObservableCollection<PolicyCategory>();
        private ObservableCollection<PolicyStatus> _policyStatuses = new ObservableCollection<PolicyStatus>();
        private ObservableCollection<SoftwareStatus> _softwareStatuses = new ObservableCollection<SoftwareStatus>();

        // Selected filter values
        private AlertCategory? _selectedAlertCategory = null;
        private AlertSeverity? _selectedAlertSeverity = null;
        private UpdateSeverity? _selectedUpdateSeverity = null;
        private string _selectedUpdateCategory = null;
        private PolicyCategory? _selectedPolicyCategory = null;
        private PolicyStatus? _selectedPolicyStatus = null;
        private SoftwareStatus? _selectedSoftwareStatus = null;

        // Filtered collections
        private ObservableCollection<ComplianceAlert> _filteredAlerts = new ObservableCollection<ComplianceAlert>();
        private ObservableCollection<WindowsUpdate> _filteredUpdates = new ObservableCollection<WindowsUpdate>();
        private ObservableCollection<SecurityPolicy> _filteredPolicies = new ObservableCollection<SecurityPolicy>();
        private ObservableCollection<SoftwareInfo> _filteredSoftware = new ObservableCollection<SoftwareInfo>();

        // Commands
        public ICommand CheckComplianceCommand { get; private set; }
        public ICommand GenerateReportCommand { get; private set; }
        public ICommand ExportReportCommand { get; private set; }
        public ICommand ClearAlertsCommand { get; private set; }
        public ICommand RefreshSoftwareCommand { get; private set; }
        public ICommand BrowseExportPathCommand { get; private set; }
        public ICommand SaveSettingsCommand { get; private set; }

        public VulnerabilityComplianceView()
        {
            InitializeComponent();
            DataContext = this;

            // Initialize compliance manager
            _complianceManager = new VulnerabilityComplianceManager();

            // Initialize commands
            CheckComplianceCommand = new RelayCommand(async _ => await CheckComplianceAsync(), _ => !_complianceManager.IsCheckingCompliance);
            GenerateReportCommand = new RelayCommand(async _ => await GenerateReportAsync(), _ => !_complianceManager.IsCheckingCompliance);
            ExportReportCommand = new RelayCommand(async _ => await ExportReportAsync(), _ => !_complianceManager.IsCheckingCompliance);
            ClearAlertsCommand = new RelayCommand(_ => ClearAlerts(), _ => _complianceManager.Alerts.Count > 0);
            RefreshSoftwareCommand = new RelayCommand(async _ => await RefreshSoftwareAsync(), _ => !_complianceManager.IsCheckingCompliance);
            BrowseExportPathCommand = new RelayCommand(_ => BrowseExportPath());
            SaveSettingsCommand = new RelayCommand(_ => SaveSettings());

            // Subscribe to compliance manager events
            _complianceManager.ComplianceCheckProgress += ComplianceManager_ComplianceCheckProgress;
            _complianceManager.ComplianceCheckCompleted += ComplianceManager_ComplianceCheckCompleted;
            _complianceManager.ComplianceAlertAdded += ComplianceManager_ComplianceAlertAdded;
            _complianceManager.ReportGenerationProgress += ComplianceManager_ReportGenerationProgress;
            _complianceManager.ReportGenerationCompleted += ComplianceManager_ReportGenerationCompleted;

            // Initialize filter collections
            InitializeFilterCollections();

            // Set up property change handlers for filtering
            PropertyChanged += (s, e) =>
            {
                if (e.PropertyName == nameof(AlertSearchText) || e.PropertyName == nameof(SelectedAlertCategory) || e.PropertyName == nameof(SelectedAlertSeverity))
                {
                    ApplyAlertFilters();
                }
                else if (e.PropertyName == nameof(SelectedUpdateSeverity) || e.PropertyName == nameof(SelectedUpdateCategory))
                {
                    ApplyUpdateFilters();
                }
                else if (e.PropertyName == nameof(SelectedPolicyCategory) || e.PropertyName == nameof(SelectedPolicyStatus))
                {
                    ApplyPolicyFilters();
                }
                else if (e.PropertyName == nameof(SoftwareSearchText) || e.PropertyName == nameof(SelectedSoftwareStatus))
                {
                    ApplySoftwareFilters();
                }
            };

            // Initial filter application
            ApplyAlertFilters();
            ApplyUpdateFilters();
            ApplyPolicyFilters();
            ApplySoftwareFilters();

            // Check compliance on startup if enabled
            if (_checkOnStartup)
            {
                Task.Run(async () =>
                {
                    await Task.Delay(2000); // Short delay to allow UI to load
                    await CheckComplianceAsync();
                });
            }

            _logger.LogInfo("VulnerabilityComplianceView initialized");
        }

        #region Properties

        public string StatusMessage
        {
            get => _statusMessage;
            set => SetProperty(ref _statusMessage, value);
        }

        public string LastCheckTimeMessage
        {
            get => _lastCheckTimeMessage;
            set => SetProperty(ref _lastCheckTimeMessage, value);
        }

        public string UpdateStatusMessage
        {
            get => _updateStatusMessage;
            set => SetProperty(ref _updateStatusMessage, value);
        }

        public string PolicyStatusMessage
        {
            get => _policyStatusMessage;
            set => SetProperty(ref _policyStatusMessage, value);
        }

        public int OverallComplianceScore => _complianceManager.OverallComplianceScore;

        public int UpdateComplianceScore => _complianceManager.UpdateComplianceScore;

        public int PolicyComplianceScore => _complianceManager.PolicyComplianceScore;

        public int SoftwareComplianceScore => _complianceManager.SoftwareComplianceScore;

        public string AlertSearchText
        {
            get => _alertSearchText;
            set => SetProperty(ref _alertSearchText, value);
        }

        public string SoftwareSearchText
        {
            get => _softwareSearchText;
            set => SetProperty(ref _softwareSearchText, value);
        }

        public ObservableCollection<AlertCategory> AlertCategories => _alertCategories;

        public ObservableCollection<AlertSeverity> AlertSeverities => _alertSeverities;

        public ObservableCollection<UpdateSeverity> UpdateSeverities => _updateSeverities;

        public ObservableCollection<string> UpdateCategories => _updateCategories;

        public ObservableCollection<PolicyCategory> PolicyCategories => _policyCategories;

        public ObservableCollection<PolicyStatus> PolicyStatuses => _policyStatuses;

        public ObservableCollection<SoftwareStatus> SoftwareStatuses => _softwareStatuses;

        public AlertCategory? SelectedAlertCategory
        {
            get => _selectedAlertCategory;
            set => SetProperty(ref _selectedAlertCategory, value);
        }

        public AlertSeverity? SelectedAlertSeverity
        {
            get => _selectedAlertSeverity;
            set => SetProperty(ref _selectedAlertSeverity, value);
        }

        public UpdateSeverity? SelectedUpdateSeverity
        {
            get => _selectedUpdateSeverity;
            set => SetProperty(ref _selectedUpdateSeverity, value);
        }

        public string SelectedUpdateCategory
        {
            get => _selectedUpdateCategory;
            set => SetProperty(ref _selectedUpdateCategory, value);
        }

        public PolicyCategory? SelectedPolicyCategory
        {
            get => _selectedPolicyCategory;
            set => SetProperty(ref _selectedPolicyCategory, value);
        }

        public PolicyStatus? SelectedPolicyStatus
        {
            get => _selectedPolicyStatus;
            set => SetProperty(ref _selectedPolicyStatus, value);
        }

        public SoftwareStatus? SelectedSoftwareStatus
        {
            get => _selectedSoftwareStatus;
            set => SetProperty(ref _selectedSoftwareStatus, value);
        }

        public ObservableCollection<ComplianceAlert> FilteredAlerts => _filteredAlerts;

        public ObservableCollection<WindowsUpdate> FilteredUpdates => _filteredUpdates;

        public ObservableCollection<SecurityPolicy> FilteredPolicies => _filteredPolicies;

        public ObservableCollection<SoftwareInfo> FilteredSoftware => _filteredSoftware;

        public int AutoCheckInterval
        {
            get => _autoCheckInterval;
            set => SetProperty(ref _autoCheckInterval, value);
        }

        public bool CheckOnStartup
        {
            get => _checkOnStartup;
            set => SetProperty(ref _checkOnStartup, value);
        }

        public string ReportExportPath
        {
            get => _reportExportPath;
            set => SetProperty(ref _reportExportPath, value);
        }

        public int CriticalThreshold
        {
            get => _criticalThreshold;
            set => SetProperty(ref _criticalThreshold, value);
        }

        public int WarningThreshold
        {
            get => _warningThreshold;
            set => SetProperty(ref _warningThreshold, value);
        }

        public int GoodThreshold
        {
            get => _goodThreshold;
            set => SetProperty(ref _goodThreshold, value);
        }

        public int ExcellentThreshold
        {
            get => _excellentThreshold;
            set => SetProperty(ref _excellentThreshold, value);
        }

        public bool EnableNotifications
        {
            get => _enableNotifications;
            set => SetProperty(ref _enableNotifications, value);
        }

        public bool NotifyCriticalIssues
        {
            get => _notifyCriticalIssues;
            set => SetProperty(ref _notifyCriticalIssues, value);
        }

        public bool NotifyHighIssues
        {
            get => _notifyHighIssues;
            set => SetProperty(ref _notifyHighIssues, value);
        }

        public bool NotifyMediumIssues
        {
            get => _notifyMediumIssues;
            set => SetProperty(ref _notifyMediumIssues, value);
        }

        #endregion

        #region Methods

        /// <summary>
        /// Initializes filter collections
        /// </summary>
        private void InitializeFilterCollections()
        {
            // Alert categories
            _alertCategories.Add(AlertCategory.WindowsUpdate);
            _alertCategories.Add(AlertCategory.SecurityPolicy);
            _alertCategories.Add(AlertCategory.Software);
            _alertCategories.Add(AlertCategory.General);

            // Alert severities
            _alertSeverities.Add(AlertSeverity.Critical);
            _alertSeverities.Add(AlertSeverity.High);
            _alertSeverities.Add(AlertSeverity.Medium);
            _alertSeverities.Add(AlertSeverity.Low);
            _alertSeverities.Add(AlertSeverity.Information);

            // Update severities
            _updateSeverities.Add(UpdateSeverity.Critical);
            _updateSeverities.Add(UpdateSeverity.Important);
            _updateSeverities.Add(UpdateSeverity.Moderate);
            _updateSeverities.Add(UpdateSeverity.Low);

            // Update categories (will be populated when updates are checked)

            // Policy categories
            _policyCategories.Add(PolicyCategory.Firewall);
            _policyCategories.Add(PolicyCategory.Password);
            _policyCategories.Add(PolicyCategory.Audit);
            _policyCategories.Add(PolicyCategory.Group);

            // Policy statuses
            _policyStatuses.Add(PolicyStatus.Compliant);
            _policyStatuses.Add(PolicyStatus.NonCompliant);
            _policyStatuses.Add(PolicyStatus.Unknown);

            // Software statuses
            _softwareStatuses.Add(SoftwareStatus.UpToDate);
            _softwareStatuses.Add(SoftwareStatus.Outdated);
            _softwareStatuses.Add(SoftwareStatus.Vulnerable);
            _softwareStatuses.Add(SoftwareStatus.Unknown);
        }

        /// <summary>
        /// Checks compliance
        /// </summary>
        private async Task CheckComplianceAsync()
        {
            try
            {
                StatusMessage = "Checking compliance...";
                await _complianceManager.CheckComplianceAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error checking compliance: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error checking compliance");
                StatusMessage = $"Error checking compliance: {ex.Message}";
            }
        }

        /// <summary>
        /// Generates a comprehensive compliance report
        /// </summary>
        private async Task GenerateReportAsync()
        {
            try
            {
                StatusMessage = "Generating compliance report...";
                await _complianceManager.GenerateComprehensiveReportAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error generating report: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error generating report");
                StatusMessage = $"Error generating report: {ex.Message}";
            }
        }

        /// <summary>
        /// Exports a compliance report
        /// </summary>
        private async Task ExportReportAsync()
        {
            try
            {
                // Create export directory if it doesn't exist
                if (!Directory.Exists(ReportExportPath))
                {
                    Directory.CreateDirectory(ReportExportPath);
                }

                // Show save file dialog
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "HTML Files (*.html)|*.html|CSV Files (*.csv)|*.csv|All Files (*.*)|*.*",
                    InitialDirectory = ReportExportPath,
                    FileName = $"Compliance_Report_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}"
                };

                if (saveFileDialog.ShowDialog() == true)
                {
                    StatusMessage = "Exporting compliance report...";
                    string filePath = saveFileDialog.FileName;
                    string extension = Path.GetExtension(filePath).ToLower();

                    // Generate report
                    var report = await _complianceManager.GenerateComprehensiveReportAsync();

                    // Export report based on file extension
                    if (extension == ".html")
                    {
                        await _complianceManager.ExportReportToHtmlAsync(report, filePath);
                    }
                    else if (extension == ".csv")
                    {
                        await _complianceManager.ExportReportToCsvAsync(report, filePath);
                    }
                    else
                    {
                        // Default to HTML if extension is not recognized
                        await _complianceManager.ExportReportToHtmlAsync(report, filePath + ".html");
                    }

                    StatusMessage = $"Report exported to {filePath}";
                }
                else
                {
                    StatusMessage = "Report export cancelled";
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error exporting report: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error exporting report");
                StatusMessage = $"Error exporting report: {ex.Message}";
            }
        }

        /// <summary>
        /// Clears all compliance alerts
        /// </summary>
        private void ClearAlerts()
        {
            try
            {
                _complianceManager.ClearAlerts();
                ApplyAlertFilters();
                StatusMessage = "Alerts cleared";
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error clearing alerts: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error clearing alerts");
                StatusMessage = $"Error clearing alerts: {ex.Message}";
            }
        }

        /// <summary>
        /// Refreshes software information
        /// </summary>
        private async Task RefreshSoftwareAsync()
        {
            try
            {
                StatusMessage = "Refreshing software information...";
                await _complianceManager.SoftwareChecker.CheckSoftwareAsync();
                ApplySoftwareFilters();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error refreshing software: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error refreshing software");
                StatusMessage = $"Error refreshing software: {ex.Message}";
            }
        }

        /// <summary>
        /// Opens a folder browser dialog to select the report export path
        /// </summary>
        private void BrowseExportPath()
        {
            try
            {
                var dialog = new System.Windows.Forms.FolderBrowserDialog
                {
                    Description = "Select folder for report exports",
                    SelectedPath = ReportExportPath
                };

                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    ReportExportPath = dialog.SelectedPath;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error browsing for export path: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error browsing for export path");
                StatusMessage = $"Error browsing for export path: {ex.Message}";
            }
        }

        /// <summary>
        /// Saves settings
        /// </summary>
        private void SaveSettings()
        {
            try
            {
                // In a real application, settings would be saved to a configuration file or registry
                // For this example, we'll just show a message
                StatusMessage = "Settings saved";
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error saving settings: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error saving settings");
                StatusMessage = $"Error saving settings: {ex.Message}";
            }
        }

        /// <summary>
        /// Applies alert filters
        /// </summary>
        private void ApplyAlertFilters()
        {
            try
            {
                _filteredAlerts.Clear();

                var alerts = _complianceManager.Alerts.AsEnumerable();

                // Apply category filter
                if (SelectedAlertCategory.HasValue)
                {
                    alerts = alerts.Where(a => a.Category == SelectedAlertCategory.Value);
                }

                // Apply severity filter
                if (SelectedAlertSeverity.HasValue)
                {
                    alerts = alerts.Where(a => a.Severity == SelectedAlertSeverity.Value);
                }

                // Apply search filter
                if (!string.IsNullOrWhiteSpace(AlertSearchText))
                {
                    string search = AlertSearchText.ToLower();
                    alerts = alerts.Where(a =>
                        a.Title.ToLower().Contains(search) ||
                        a.Description.ToLower().Contains(search) ||
                        a.Recommendation.ToLower().Contains(search));
                }

                // Add filtered alerts to collection
                foreach (var alert in alerts)
                {
                    _filteredAlerts.Add(alert);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error applying alert filters: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error applying alert filters");
            }
        }

        /// <summary>
        /// Applies update filters
        /// </summary>
        private void ApplyUpdateFilters()
        {
            try
            {
                _filteredUpdates.Clear();

                var updates = _complianceManager.UpdateChecker.AvailableUpdates.AsEnumerable();

                // Apply severity filter
                if (SelectedUpdateSeverity.HasValue)
                {
                    updates = updates.Where(u => u.Severity == SelectedUpdateSeverity.Value);
                }

                // Apply category filter
                if (!string.IsNullOrWhiteSpace(SelectedUpdateCategory))
                {
                    updates = updates.Where(u => u.Category.Contains(SelectedUpdateCategory));
                }

                // Add filtered updates to collection
                foreach (var update in updates)
                {
                    _filteredUpdates.Add(update);
                }

                // Update status message
                UpdateStatusMessage = $"{_filteredUpdates.Count} updates displayed";
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error applying update filters: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error applying update filters");
            }
        }

        /// <summary>
        /// Applies policy filters
        /// </summary>
        private void ApplyPolicyFilters()
        {
            try
            {
                _filteredPolicies.Clear();

                var policies = new List<SecurityPolicy>();

                // Combine all policy types
                policies.AddRange(_complianceManager.PolicyMonitor.FirewallPolicies);
                policies.AddRange(_complianceManager.PolicyMonitor.PasswordPolicies);
                policies.AddRange(_complianceManager.PolicyMonitor.AuditPolicies);
                policies.AddRange(_complianceManager.PolicyMonitor.GroupPolicies);

                // Apply category filter
                if (SelectedPolicyCategory.HasValue)
                {
                    policies = policies.Where(p => p.Category == SelectedPolicyCategory.Value).ToList();
                }

                // Apply status filter
                if (SelectedPolicyStatus.HasValue)
                {
                    policies = policies.Where(p => p.Status == SelectedPolicyStatus.Value).ToList();
                }

                // Add filtered policies to collection
                foreach (var policy in policies)
                {
                    _filteredPolicies.Add(policy);
                }

                // Update status message
                PolicyStatusMessage = $"{_filteredPolicies.Count} policies displayed";
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error applying policy filters: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error applying policy filters");
            }
        }

        /// <summary>
        /// Applies software filters
        /// </summary>
        private void ApplySoftwareFilters()
        {
            try
            {
                _filteredSoftware.Clear();

                var software = _complianceManager.SoftwareChecker.InstalledSoftware.AsEnumerable();

                // Apply status filter
                if (SelectedSoftwareStatus.HasValue)
                {
                    software = software.Where(s => s.Status == SelectedSoftwareStatus.Value);
                }

                // Apply search filter
                if (!string.IsNullOrWhiteSpace(SoftwareSearchText))
                {
                    string search = SoftwareSearchText.ToLower();
                    software = software.Where(s =>
                        s.Name.ToLower().Contains(search) ||
                        s.Publisher.ToLower().Contains(search));
                }

                // Add filtered software to collection
                foreach (var s in software)
                {
                    _filteredSoftware.Add(s);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error applying software filters: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error applying software filters");
            }
        }

        #endregion

        #region Event Handlers

        /// <summary>
        /// Handles the ComplianceCheckProgress event
        /// </summary>
        private void ComplianceManager_ComplianceCheckProgress(object sender, ComplianceCheckProgressEventArgs e)
        {
            try
            {
                // Update UI on the UI thread
                Dispatcher.Invoke(() =>
                {
                    StatusMessage = e.Status;
                });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error handling compliance check progress: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error handling compliance check progress");
            }
        }

        /// <summary>
        /// Handles the ComplianceCheckCompleted event
        /// </summary>
        private void ComplianceManager_ComplianceCheckCompleted(object sender, ComplianceCheckCompletedEventArgs e)
        {
            try
            {
                // Update UI on the UI thread
                Dispatcher.Invoke(() =>
                {
                    if (e.Success)
                    {
                        StatusMessage = "Compliance check completed";
                        LastCheckTimeMessage = $"Last check: {_complianceManager.LastComplianceCheckTime:yyyy-MM-dd HH:mm:ss}";

                        // Update filtered collections
                        ApplyAlertFilters();
                        ApplyUpdateFilters();
                        ApplyPolicyFilters();
                        ApplySoftwareFilters();

                        // Update update categories
                        UpdateUpdateCategories();

                        // Notify property changes for scores
                        OnPropertyChanged(nameof(OverallComplianceScore));
                        OnPropertyChanged(nameof(UpdateComplianceScore));
                        OnPropertyChanged(nameof(PolicyComplianceScore));
                        OnPropertyChanged(nameof(SoftwareComplianceScore));

                        // Show notification if enabled
                        if (EnableNotifications)
                        {
                            ShowComplianceNotification();
                        }
                    }
                    else
                    {
                        StatusMessage = $"Compliance check failed: {e.ErrorMessage}";
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error handling compliance check completed: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error handling compliance check completed");
            }
        }

        /// <summary>
        /// Handles the ComplianceAlertAdded event
        /// </summary>
        private void ComplianceManager_ComplianceAlertAdded(object sender, ComplianceAlertEventArgs e)
        {
            try
            {
                // Update UI on the UI thread
                Dispatcher.Invoke(() =>
                {
                    // Apply filters to include the new alert if it matches the current filters
                    ApplyAlertFilters();

                    // Show notification if enabled and severity matches notification settings
                    if (EnableNotifications)
                    {
                        if ((e.Alert.Severity == AlertSeverity.Critical && NotifyCriticalIssues) ||
                            (e.Alert.Severity == AlertSeverity.High && NotifyHighIssues) ||
                            (e.Alert.Severity == AlertSeverity.Medium && NotifyMediumIssues))
                        {
                            ShowAlertNotification(e.Alert);
                        }
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error handling compliance alert added: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error handling compliance alert added");
            }
        }

        /// <summary>
        /// Handles the ReportGenerationProgress event
        /// </summary>
        private void ComplianceManager_ReportGenerationProgress(object sender, ReportGenerationProgressEventArgs e)
        {
            try
            {
                // Update UI on the UI thread
                Dispatcher.Invoke(() =>
                {
                    StatusMessage = $"Generating report: {e.Status} ({e.PercentComplete}%)";
                });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error handling report generation progress: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error handling report generation progress");
            }
        }

        /// <summary>
        /// Handles the ReportGenerationCompleted event
        /// </summary>
        private void ComplianceManager_ReportGenerationCompleted(object sender, ReportGenerationCompletedEventArgs e)
        {
            try
            {
                // Update UI on the UI thread
                Dispatcher.Invoke(() =>
                {
                    if (e.Success)
                    {
                        StatusMessage = "Report generation completed";
                    }
                    else
                    {
                        StatusMessage = $"Report generation failed: {e.ErrorMessage}";
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error handling report generation completed: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error handling report generation completed");
            }
        }

        #endregion

        #region Helper Methods

        /// <summary>
        /// Updates the update categories collection
        /// </summary>
        private void UpdateUpdateCategories()
        {
            try
            {
                // Get unique categories from available updates
                var categories = _complianceManager.UpdateChecker.AvailableUpdates
                    .SelectMany(u => u.Category.Split(','))
                    .Select(c => c.Trim())
                    .Distinct()
                    .OrderBy(c => c)
                    .ToList();

                // Update the categories collection
                _updateCategories.Clear();
                foreach (var category in categories)
                {
                    _updateCategories.Add(category);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error updating update categories: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error updating update categories");
            }
        }

        /// <summary>
        /// Shows a notification for compliance check results
        /// </summary>
        private void ShowComplianceNotification()
        {
            try
            {
                // In a real application, this would show a system notification
                // For this example, we'll just log it
                _logger.LogInfo($"Compliance check completed. Overall score: {OverallComplianceScore}%");
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error showing compliance notification: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error showing compliance notification");
            }
        }

        /// <summary>
        /// Shows a notification for a compliance alert
        /// </summary>
        private void ShowAlertNotification(ComplianceAlert alert)
        {
            try
            {
                // In a real application, this would show a system notification
                // For this example, we'll just log it
                _logger.LogInfo($"Compliance alert: {alert.Title}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error showing alert notification: {ex.Message}");
                _exceptionHandler.HandleException(ex, "Error showing alert notification");
            }
        }

        #endregion

        #region INotifyPropertyChanged Implementation

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;

            field = value;
            OnPropertyChanged(propertyName);
            return true;
        }

        #endregion
    }

    /// <summary>
    /// Converts AlertSeverity to Brush
    /// </summary>
    public class AlertSeverityToBrushConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            if (value is AlertSeverity severity)
            {
                switch (severity)
                {
                    case AlertSeverity.Critical:
                        return new SolidColorBrush(Colors.Red);
                    case AlertSeverity.High:
                        return new SolidColorBrush(Colors.OrangeRed);
                    case AlertSeverity.Medium:
                        return new SolidColorBrush(Colors.Orange);
                    case AlertSeverity.Low:
                        return new SolidColorBrush(Colors.Yellow);
                    case AlertSeverity.Information:
                        return new SolidColorBrush(Colors.Blue);
                    case AlertSeverity.Error:
                        return new SolidColorBrush(Colors.Purple);
                }
            }

            return new SolidColorBrush(Colors.Gray);
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts AlertCategory to Icon
    /// </summary>
    public class AlertCategoryToIconConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            // In a real application, this would return an image source for each category
            // For this example, we'll return null
            return null;
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts ComplianceScore to Brush
    /// </summary>
    public class ComplianceScoreToBrushConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            if (value is int score)
            {
                if (score < 50)
                    return new SolidColorBrush(Colors.Red);
                else if (score < 70)
                    return new SolidColorBrush(Colors.OrangeRed);
                else if (score < 85)
                    return new SolidColorBrush(Colors.Orange);
                else if (score < 95)
                    return new SolidColorBrush(Colors.Green);
                else
                    return new SolidColorBrush(Colors.DarkGreen);
            }

            return new SolidColorBrush(Colors.Gray);
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts UpdateSeverity to Brush
    /// </summary>
    public class UpdateSeverityToBrushConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            if (value is UpdateSeverity severity)
            {
                switch (severity)
                {
                    case UpdateSeverity.Critical:
                        return new SolidColorBrush(Colors.Red);
                    case UpdateSeverity.Important:
                        return new SolidColorBrush(Colors.OrangeRed);
                    case UpdateSeverity.Moderate:
                        return new SolidColorBrush(Colors.Orange);
                    case UpdateSeverity.Low:
                        return new SolidColorBrush(Colors.Yellow);
                }
            }

            return new SolidColorBrush(Colors.Gray);
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts PolicyStatus to Brush
    /// </summary>
    public class PolicyStatusToBrushConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            if (value is PolicyStatus status)
            {
                switch (status)
                {
                    case PolicyStatus.Compliant:
                        return new SolidColorBrush(Colors.Green);
                    case PolicyStatus.NonCompliant:
                        return new SolidColorBrush(Colors.Red);
                    case PolicyStatus.Unknown:
                        return new SolidColorBrush(Colors.Gray);
                }
            }

            return new SolidColorBrush(Colors.Gray);
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts SoftwareStatus to Brush
    /// </summary>
    public class SoftwareStatusToBrushConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            if (value is SoftwareStatus status)
            {
                switch (status)
                {
                    case SoftwareStatus.UpToDate:
                        return new SolidColorBrush(Colors.Green);
                    case SoftwareStatus.Outdated:
                        return new SolidColorBrush(Colors.Orange);
                    case SoftwareStatus.Vulnerable:
                        return new SolidColorBrush(Colors.Red);
                    case SoftwareStatus.Unknown:
                        return new SolidColorBrush(Colors.Gray);
                }
            }

            return new SolidColorBrush(Colors.Gray);
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Relay command implementation
    /// </summary>
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Predicate<object> _canExecute;

        public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute(parameter);
        }

        public void Execute(object parameter)
        {
            _execute(parameter);
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}